package main

// Написать программу,
// которая конкурентно рассчитает значение квадратов чисел взятых из
// массива (2,4,6,8,10) и выведет их квадраты в stdout.

import (
	"fmt"
	"sync"
)

func main() {
	ch := make(chan int)
	
	// запускаем горутины, которая будет вычислять квадраты и отправлять их в канал
	go countSquares([]int{2, 4, 6, 8, 10}, ch)

	// получаем значения из канала, пока его не закроют
	// выводим в main, т.к. он все равно должен ждать завершения countSquares
	// результат выводится не порядку значений в массиве
	for sq := range ch {
		fmt.Println(sq)
	}
}

func countSquares(arr []int, ch chan<- int) {
	// создаем WaitGroup, чтобы ждать заврешения всех горутин, которые считают квадраты
	wg := sync.WaitGroup{}

	for _, number := range arr {
		// увеличиваем счетчик WaitGroup, т.к. запускаем еще одну горутину
		wg.Add(1)
		// Передаем number, т.к. цикл закончится быстро
		// (number вне анонимной горутины почти сразу станет равным последнему значению)
		go func(number int) {
			// после вычеслений нужно сказать что горутина выполнена
			defer wg.Done()
			sq := number * number
			ch <- sq
		}(number)
	}
	// ждем завершения всех горутин
	wg.Wait()
	close(ch)
}
